name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check code formatting
        run: npm run format:check
      
      - name: Run affected lint
        run: npx nx affected:lint --base=origin/${{ github.base_ref }} --head=HEAD
      
      - name: Run affected tests
        run: npx nx affected:test --base=origin/${{ github.base_ref }} --head=HEAD
      
      - name: Run affected build
        run: npx nx affected:build --base=origin/${{ github.base_ref }} --head=HEAD
      
      - name: Comment PR
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## PR Validation Results')
            );
            
            const body = `## PR Validation Results
            
            âœ… All checks passed!
            
            ### Affected Projects
            - \`web\`: React PWA Application
            - \`api\`: Node.js Backend API
            
            ### Next Steps
            1. Review code changes
            2. Test locally if needed
            3. Merge when ready`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body,
              });
            }